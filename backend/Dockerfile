# ---- Base de build (precisa de devDependencies para compilar Nest) ----
FROM node:20-alpine AS build
WORKDIR /app

# Instala s√≥ a partir dos manifests para melhor cache
COPY package*.json ./
RUN npm ci

# Prisma Client precisa do schema em build
COPY prisma ./prisma
RUN npx prisma generate

# Copia o restante c√≥digo e compila
COPY . .
RUN npm run build

# Remove devDependencies para o runtime ficar leve
RUN npm prune --omit=dev


# ---- Runtime (produ√ß√£o) ----
FROM node:20-alpine AS runtime
WORKDIR /app
ENV NODE_ENV=production

# Copia apenas o necess√°rio
COPY package*.json ./
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
# (opcional: manter prisma/ para migrate deploy no arranque)
COPY --from=build /app/prisma ./prisma

# Garante que o Prisma CLI existe no runtime (remove se o "prisma" j√° for dep de produ√ß√£o)
RUN npm i -g prisma

# Porta da API
EXPOSE 3000

# Arranque padr√£o: se houver DATABASE_URL, aplica migrations; depois arranca a API
# Observa√ß√£o: usar "sh -lc" permite usar a expans√£o && e o teste do shell.
CMD [ "sh", "-lc", "if [ -n \"$DATABASE_URL\" ]; then echo \"üóÑÔ∏è  Running Prisma migrate deploy...\"; npx prisma migrate deploy; else echo \"‚ö†Ô∏è  DATABASE_URL not set; skipping prisma migrate deploy.\"; fi && node dist/main.js" ]
